import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_analytics/firebase_analytics.dart';

class FirebaseService {
  static FirebaseService? _instance;
  static FirebaseService get instance => _instance ??= FirebaseService._internal();
  FirebaseService._internal();

  // Firebase instances
  late FirebaseApp app;
  late FirebaseAuth auth;
  late FirebaseFirestore firestore;
  late FirebaseAnalytics analytics;

  bool _initialized = false;
  bool get isInitialized => _initialized;

  /// Initialize Firebase services
  Future<void> initialize() async {
    if (_initialized) return;

    try {
      // Initialize Firebase app
      app = await Firebase.initializeApp(
        // options will be generated by flutterfire configure
      );

      // Initialize services
      auth = FirebaseAuth.instance;
      firestore = FirebaseFirestore.instance;
      analytics = FirebaseAnalytics.instance;

      // Configure Firestore settings
      firestore.settings = const Settings(
        persistenceEnabled: true, // Enable offline support
        cacheSizeBytes: Settings.CACHE_SIZE_UNLIMITED,
      );

      _initialized = true;
      print('✅ Firebase initialized successfully');
    } catch (e) {
      print('❌ Failed to initialize Firebase: $e');
      rethrow;
    }
  }

  /// Sign in anonymously for demo users
  Future<User?> signInAnonymously() async {
    try {
      final userCredential = await auth.signInAnonymously();
      await analytics.logEvent(name: 'anonymous_sign_in');
      return userCredential.user;
    } catch (e) {
      print('❌ Anonymous sign in failed: $e');
      return null;
    }
  }

  /// Sign in with email and password
  Future<User?> signInWithEmailPassword(String email, String password) async {
    try {
      final userCredential = await auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      await analytics.logEvent(name: 'email_sign_in');
      return userCredential.user;
    } catch (e) {
      print('❌ Email sign in failed: $e');
      return null;
    }
  }

  /// Create new user account
  Future<User?> createUserWithEmailPassword(String email, String password) async {
    try {
      final userCredential = await auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );
      await analytics.logEvent(name: 'user_registration');
      return userCredential.user;
    } catch (e) {
      print('❌ User creation failed: $e');
      return null;
    }
  }

  /// Sign out current user
  Future<void> signOut() async {
    try {
      await auth.signOut();
      await analytics.logEvent(name: 'sign_out');
    } catch (e) {
      print('❌ Sign out failed: $e');
    }
  }

  /// Get current user
  User? get currentUser => auth.currentUser;

  /// Check if user is signed in
  bool get isSignedIn => currentUser != null;

  /// Stream of authentication state changes
  Stream<User?> get authStateChanges => auth.authStateChanges();

  /// Log analytics event
  Future<void> logEvent(String name, {Map<String, Object?>? parameters}) async {
    try {
      await analytics.logEvent(name: name, parameters: parameters);
    } catch (e) {
      print('❌ Analytics logging failed: $e');
    }
  }

  /// Log custom business events
  Future<void> logTransaction(String transactionId, double amount) async {
    await logEvent('pos_transaction', parameters: {
      'transaction_id': transactionId,
      'amount': amount,
      'timestamp': DateTime.now().millisecondsSinceEpoch,
    });
  }

  Future<void> logProductSale(String productId, int quantity, double revenue) async {
    await logEvent('product_sale', parameters: {
      'product_id': productId,
      'quantity': quantity,
      'revenue': revenue,
      'timestamp': DateTime.now().millisecondsSinceEpoch,
    });
  }
}